Module 1: HTML, CSS, and Git

For 5-10 minutes, write about 2-3 personal values and why they matter to you.

Take 5 minutes to write about how these personal values relate to take the bootcamp.


Assignment Schedule
Class 1 (December 14): Lessons 1 and 2
Class 2 (December 16): Lessons 3,4,5
    Be sure to download files before class!
Challenge Assignment #1: Sunday Dec 26
 

Module Project: Run Buddy

GitHub Pages:
    GitHub pages is a really easy way to make webpages from your GitHub repository


touch - create file

1.1.3: Get started with command line / Set up Project

Git Code:
cd desktop/username/desktop/folder
mkdir Module-1
cd Module-1
mkdir projects
cd projects
mkdir run-Buddy
cd run-Buddy

touch hello.txt
touch index.html

1.1.4: Add html
Don't worry about how you do on the assessments
ASCII does not have emoji's - UTF-8 does

1.1.5 Intro Git
In Git Bash, go to the code where you made the run-buddy folder. make sure 'pwd' returns the fodler correctly

git init - creates repo, initializes version control
git status - says what's changed, checks version control status
git add index.html - adds file to version control, stage the changes to the git
git status
git commit -m'your comment here.' - takes everything and 'commits'

git log - history of commits


1.1.6 HTML Outline

<div> - container element
    lots of divs - "div soup"
    HTML5 introduces <header> but if there isn't a "semantic element" availale you can fall back to <div>
        **<header> is different than <head> 
            <header> is semantic element
            <head> is html mandatory element
    HTML introduces "semantic elements" like <h1> and <footer> to break up the <div> soup
        if you can't find the right "semantic element" you can use <div>
    

Sketch out the webpage should be the first thing you do before writing any HTML code
There's no difference between a <div> element and a <section>
hidden code is designated by <!-- your comment -->

1.1.7 Saving Git Progress

touch .gitignore - create file specify file types we do not want to track
touch DS_Store
git add . - add files from current directory or 
    git add -A (entire project)

git commit -m 'added gitignore and html outline'

1.1.8 Using GitHub Pages
create a new repo in GitHub
link to local project by 
    on github website click the green Code button
    copy/paste HTTPS or SSH key


git remote add origin git@github.com:username/run-buddy.git
git remote -v

go to settings in your online github repo and click on it (skipping this part bc i dont want some random page on my github)
find pages in the left hand column and click

End 1.1
----------------------------------------------------------
Start 1.2

1.2.3 Adding Header Content

Branding - adding <h1> to <header>

Navigation
    <nav> - semantic element

Lists <li> 
    ordered lists - <ol>
    unordered lists - <ul>

Attributes
    keywords that can be required for certain tags
    used to provide identity, function, and context to elements

1.2.4 CSS Basics

body { 
    color: #39a2b2;
    font-family: Times New Roman, Roboto, sans-serif;
}

body is the selector
font-family is the property name
; is the declaration terminator
Times New Roman, Roboto, sans-serif is the property value

property: property-value is akin to font-family: Helvetica

the entire block within {} is the css rule

link css file in <head> of html file
<link rel="stylesheet" href="./assets/css/style.css" />

Inline Style Attributes
    <h1 style="color: blue; font-size: 100px;">RUN BUDDY</h1>   
    add attribute by including the style= with the property values

Style Attributes in <head> HTML element
just add css rule within <style>
  <style>
    body {
      background-color: tomato;
    }h1 {
  font-size: 110px;
}  </style>

External vs Inline Styling
    External CSS is:
        more flexible
        easier to change
        looks cleaner
        share styles across multiple html files

Separation of Concerns (software engineering design principle)
    Keep code with separate functions in different files or classes

1.2.5 Setting up Style Sheet
create /assets/css/styles.css using touch
<link rel="stylesheet" href="./assets/css/style.css">

1.2.6 CSS styles
start with writing styles that apply to the whole page
child elements (like <h1>) will receive the styles of their parent elements eg. <body>

Comments in CSS are denoted by /* text */

CSS Box Model
Parent>child
Margin encases Border encases Padding encases Content

1.2.7 Detailed CSS styles
CSS cascade is an algorithm that the browser uses to decide which css styles to apply
The Cascade has 3 factors:
    Importance:
        !important at the end of a property declaration will override any conflicting style declarations
    Specificity:
        CSS will apply styles to the most specific definition it can find
    Source Order:
        CSS is read top-down; the last defined style will be used.

* means Universal Selector

End 1.2
-----------------------------------------------------------
Start 1.3

1.3.3 Hero Image
Hero Image - a large banner placed prominently at the top of a page

Accessibility: Headings should fall in sequential order to help 
    screen readers interpret relative importance of content on the page

Call To Action (CTA) (Software Engineering Design Principle)
    a sign-up for is a type of CTA
    CTAs encourage the user to do something (turn site visitors into sales leads)

Forms <form> - a semantic HTML element
    <label> - semantic element for telling user what to enter and linking to associated input
        this link enhances accessibility by allowing users to click on the label's text as well as radio buttons
            provides more clickable surface area
    <input> - semantic element for user input
        type="email" for email
        type="tel" for phone number
    type="radio" for radio button
        radio button elements must have the same name="" property to be associated with the same radio group
        to select only 1 radio button in a group, they must have the same name
        "for" attribute is used for the radio button's label and identity
        Simple Radio Button Example:
            <input type="radio" name="radio-button-group" id="button-yes" />
            <label for="button-yes">Yes</label>
            <input type="radio" name="radio-button-group" id="button-no" />
            <label for="button-no">No</label>
    type="checkbox" for checkbox
        Accessibility: Make sure to wrap content of entire checkbox into <p> to make the entire space clickable
        <label for="checkboxlabel">Label Text</label>
        <input type="checkbox" name="checkbox-name" id="checkboxlabel" />
    Button
        <button type="submit">Button Text</button>

Don't put any empty lines within parent/child relationships 

Block elements are displayed on a new line.
Block elements match the width of their parent.
Inline elements are NOT displayed on a new line.
Inline elements wrap their content. They take up as much space as they need.

1.3.4 Hero Element Style
Dot Notation tells the browser we are using a CSS class

1.3.5 Element Positioning
Within a CSS class, the position property can set with:
    static - default value; not affected by top, bottom, left, right
    relative - uses top/bottom to vertically offset and left/right to horizontally offset
        - absolute positioning of a child element relative to the parent container
    absolute - removes element and offsets relative to parent element margins
        - The element is positioned relative to its first positioned (not static) ancestor element
        - in absolute positioning, it has top/bottom/left/right attributes outside of margin-top/bottom/left/right
	
    fixed - fixes element to a spot in the browser window (like freeze panes but for webpages)
    others: sticky, inherit, initial
    also see - float

the box-sizing element changes the values for both width and height
to position a child element in relation to its parent element, use the relative position property

1.3.6 Style the Sign up Form
practice doesn't make perfect - it makes developers

End 1.3
---------------------------------------------------
Start 1.4

1.4.3 Filling HTML
Dummy Text - type lorem then press tab

1.4.4 Icon Images
SVG (Scalable Vector Graphics)
    can accomodate any screen size without losing quality
    graphics will scale
    perfect for icons and logos

The alt Attributes 
    Accessibility: every image must have an alt attribute
    alt explains the content and context of images to search engines and screen readers
    decorative images should set the attribute to empty so the screen reader skips it
        alt=""
    Good alt text:
        describe the image as specifically as possible
        under 125 characters
        use keywords, but avoid keyword stuffing
        don't use images as text
        don't include image of, picture of
        buttons should have an alt attribute that describes the function of the button
        use longdesc="" and put the description in a separate resource or within the text of the page containing the image



Make sure to check your job's style guide for subjective decisions

1.4.5 Styling centering block element
the 'inline-block' value will wrap the content but padding, etc will act like block elements
    couple with text-align 

margin: 0 auto;  
    - centering a block element with  a width of less than 100%
    - set top/bottom margins at 0 and auto calc right/left
    - does not center vertically

1.4.6 Style what-we-do section
keep all CSS rules for each section together

Don't Repeat Yourself (Software Engineering Design Principle)
    "Every piece of knowledge must have a single, unambiguous, authoritative representation within a system"
    a change in any single element does not require a change in logically unrelated elements

text-align: center will center anything inside an element
    if you want to center an image, apply text-align to the parent element, not the image itself

the purpose of the alt attribute is to provide context for the image
you can add more than one class to an element by adding a space between class names
margin: 0 auto lets you center a width of less than 100%

End 1.4
-----------------------------------------------------
Start 1.5

float
    places an element in the right side or left side of its container
    allowing text and line elements to wrap around it
    Still remaining a part of the flow of the page (in contrast to absolute positioning)

1.5.4 Build Trainer HTML
The alt image value
    simple image - an image that serves as content to the page
    alt guidelines  (Accessibility)
        - describe the image in less than 140 characters
        - convey purpose and content of the image
        - should not have "image of" or "graph of" since screen readers do that already

1.5.5 Add CSS to Trainer
shorthand for margin-top, margin-right, margin-bottom, margin-left is 
    margin: top, right, bottom, left
        - clockwise
        - also works with padding
    
overflow
    sets the desired behavior for an element's overflow
    if text is too big for text box, what to do with that text
    allows parent element to physically contain its child elements 

"block formatting context" 
    a part of the CSS rendering of a web page. 
    a "region" where the layout of block boxes and floats interact with other elements
    (auto; visible;hidden;scroll)

inheritance - when a child element's style is defined by its parent element

Utility classes
    CSS classes that contain only ONE rules
    used for applying a single property declaration to multiple html elements
    add the class to the <element> to <div x class="">

Fonts - Windows & macOS
    Windows replaces Helvetica with Arial
    Arial uses weight: normal instead of weight: lighter
    It will look different on macOS

End 1.5
------------------------------------------------------------
Start 1.6

1.6.5 Adding final classes
iframe
    inline frame - nests an html page into the current page
    large size length/width attributes can help make controls visible
    old HTML uses frameborder, new HTML uses border  
    be CAREFUL - copyright and hacked sites

<br /> - line break. can also use <p>

<address> - address element (Accessibility)
    contact info for owner of article
    physical address

1.6.6 Contact info
Principle of Single Responsibility (CS Design Engineering Principle)
    every module, class, or function should have responsiblity over a single part of that program's functionality and it should encapsulate that part
    split up html and CSS into different files. external css rules are overriden by internal html elements

type selector - matches elements by node name - no "."
type-selector {
    property: "property-value"
}

class selector - selects elements with a specific class attribute
.class-selector {
    property: "property-value"
}

1.6.7 Two column layout
To add two divs into two columns, nest them into a larger div and have that set to display: inline-block;
line-height - shrink or expand text
<iframe> needs caution for copyright infringement and security risks from bad sites
vertical-align: top; aligns an element to the top of its container

End 1.6 
------------------------------------------------------------------------------
Start 1.7

1.7.4 Setting up more html files
Scaffolding for html:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Webpage Title</title>
  </head>
  <body>
  </body>
</html>

Webpage Titles
    structure: [page-title] - [site title]
    60 characters or less (seo cuts off at 60)

Set of HTML code is called a component

Best practice for <a> element is to disable if you are on the same page as it's link for performance reasons
Best practice is to set up html and styles to be reused across sections

1.7.6 Secondary styles
Seperate style sheets are useful when it makes sense for organization or styles or if there are multiple developers handling different parts of the site

1.7.7 Secondary Style Sheet
You can add mutiple stylesheets to the <head> element and the browser will use the LAST one 
    you dont need to re-add all the styles - just link the earlier sheet above the override linked stylesheet
<link rel="stylesheet" href="./assets/css/style.css" />
<link rel="stylesheet" href="./assets/css/secondary-styles.css" />

the secondary style sheet will override any values from the first. but the rest of the values from the first get carried over

1.7.8 New styles
the <head> element contains info for the browser to interact with
the <body> element contains all the info for the user to interact with


Challenge Module #1: HTML CSS Git Challenge: Code Refactor
ODD Challenges: feature request challenges. start with starter code
EVEN Challenges: no starter code. job seeking or take-home assignments

Agile Software Development
    agile (make it up as you go) vs waterfall (make it up before you start; live with the consequences)
    testing is done in every iteration
    Software development lifecycle support
        concept creation>requirements specification>Design>Code>Unit Test>Integration Test>System test>Acceptance test>System in use

Scrum TODO





Challenge mode Acceptance Criteria

All links are functioning correctly
rework css by consolidating css selectors and properties (lots of duplicate CSS rules)
    organizing them to follow the semantic structure of html elements
include comments before each element or section of the page

semantic html elements (proper tags for headings, sections & alt attributes)
elements follow a logical structure independent of styling and positioning
image elements have proper alt attributes (complete)
heading attributes are in sequential order
title element has concise, descriptive title????

Grading requirements
links all function correctly
CSS selectors and properties are consolidated and organized to follow semantic structure
CSS file is properly commented

Deployed at live URL
load with no errors
github url submitted
    github repository that contains the application code

Resembles 90% of the screenshots in the challenge instructions

Repository has a unique name.
Repository follows best practices for file structure and naming conventions.
Repository follows best practices for class/id naming conventions, indentation, quality comments, etc.
Repository contains multiple descriptive commit messages.
Repository contains quality README file with description, screenshot, and link to deployed application.

SUBMIT:
The URL of the deployed application.
The URL of the GitHub repository that contains your code. 
    Give the repository a unique name and include a README file that describes the project.




Questions:
    section versus div
    alt attributes, decoration or not?








