Module 17 Computer Science for JavaScript

JavaScript Data Structures:
    stack - linear - uses array methods pop and push
    queue - linear - uses shift(remove item from front) and push (add element to end of array)
    heap - two dimensional with hierarchal organization

    call stack data
        - adds and removes data structures from only one end of the structure
        - Last in, First out (LIFO)
            - type of operation when the last item added onto the stack is also the first item to be removed (like a stack of books)
        - where JavaScript executes and evaluates code
        - determines the code to be executed
        - console.trace() - keeps track of call stack
    
    callback queue
        - another linear data structure like stack
        - First In, First Out (FIFO)
            - timing of arrival can make a difference in the timing of exit
        - enable JavaScript to handle asynchronous functions with the event loop
    
    memory heap
        - heap used in JavaScript
        - where data is stored

    Web APIs and Node.js core modules
        - native functions of the browser and provide key interfaces to the DOM or filesystem
        - 

    single-threaded
        - executes each line of code, one at a time
    
    thread of execution (TOE)
        - line of code currently being executed
        - global memory
        - global variable environment
        - <|f|> is shorthand for functions params, return type, and definition
           -  name: <|f|>
    
    function caller
        - 
    
    event loop 
        - when call stack is empty, event loop allows callback function from callback queue to push onto call stack
    
    stack overflow error
        - too many functions placed in the call stack, exceeding its capacity limit
    
OOP (imperative) vs Functional Programming (declarative)
    OOP - based on imperative programming (how a program will run)
    Functional Programming - declarative programming (what a program does)


closure - created when a function is returned
    - function that contains references to its surrounding state
    - can transfer surrounding memory references through closures
    - Three Scope Chains
        inner function has access to
        1. its own Scope
        2. the outer function's variables defined between the outer functions curly brackets
        3. global variables
    - used to create private declarations
    - global variable is last on the closure scope chain
    - prevent polluting global namespace that cause collisions due to name conflicts
    - prevents accidental modifications of global variables
    - performance gains when accessing local variables vs lookups on the global scope
    - emulate private methods

The Module Pattern is one of the important patterns in JavaScript. It is a commonly used Design Pattern which is used to wrap a set of variables and functions together in a single scope

    
lexical environment - the place where references for variables are stored in the memory during program execution.

scope - determined during runtime when JavaScript is compiled

when a function is called:
    execution context is created
    places variables in lexical environment



factory function - in contrast to class function
    - a way to produce objects with a function
    - return object literals instead of functions


const tiger = function() { 
    const noise = 'roar';
    return {
        sound: function() {
        console.log(noise);
            },
        }
}
const tigger = tiger(); // assigned the returned object literal to tigger
tigger.sound(); //=> "roar"


const findIndex = (num) => {
  for (let i = 0; i < data.length; i++) {
    if (data[i] === num) {
      console.log(`${num} found at index ${i}`);
    }
  }
};

factory function vs oop class function
    - oop
        - needs keywords this, new
        - can cause errors due to context changes
    - factory
        - can keep variables "private"
        
        
inheritance
    - design your types based on what they are
composition
    - design types based on what they can do

({}) - parenthesis wrapping body of functions
    - object literal is being returned
    - instead of creating own state internally, they accept state through function parameters

this keyword 
    - don't use it
    - context is lost when this is no longer associated with an object
    - solved with bind or function wrapper
    - easiest to eliminate with factory function


Algorithm types
    - linear search - O(n)
        looks at every index in sequential order
        works, but a lot of time is wasted looking at unneeded indices
        add break once index is found
    
    - binary search
        data MUST be sorted in numerical order
        continually dividing data in half based on whether the number you're looking for is greater than or less than a chosen point
        looking for "L" in a dictionary, open in middle and go towards "L"
        must know what direction to "look" towards
        using midpoints to find correct number

        const data = [12, 23, 38, 40, 54, 62, 71, 87, 99];

        const binarySearch = (arr, num, left, right) => {
        let middle = Math.floor((left + right) / 2);

        // range overlapped, so never found number
        if (left > right) {
            return -1;
        }
        else if (num === arr[middle]) {
            return middle;
        }
        else if (num < arr[middle]) {
            // call again with a new right value
            return binarySearch(arr, num, left, middle - 1);
        }
        else {
            // call again with a new left value
            return binarySearch(arr, num, middle + 1, right);
        }
        };

        // set initial left and right values on first call
        console.log(binarySearch(data, 12, 0, data.length - 1));



Big 'O' Notation
    - mathematical formula that's used to predict the amount of work an algorithm performs as the size on the input grows
    - O stands for 'order'
    - the growth rate of a function is also known as the order of a function
    - operating on a given input with a varying size
    - list of restaurants alphabetically
    - Common Big O's
        - Constant time - O(1) complexity - same number of steps
            function multiply(x,y) {
                return x*y;
            }
        - Linear Time O(n) complexity
            function linearSearch(arr, target) {
                for (let i in arr) {
                    if (arr[i] == target) {
                        return arr[i];
                    }
                }
            }
        - Quadratic Time O(n^2) complexity
            function buildSquareMatrix(arr) {
                let matrix = [];
                for (let i in arr) {
                    matrix[i] = [];
                    for (let j in arr) {
                        matrix[i].push(arr[j]);
                    }
                }

                return matrix;
            }
        - Logarithmic Time - O(log(n)) complexity - logb(b^x) = x
            function binarySearch(arr, target, low, high) {
                if (low > high) {
                    return -1;
                }
            }
            const mid = Math.floor((low + high) / 2);
            if (arr[mid] === target) {
                return arr[mid];
            } else if (arr[mid] < target) {
                return binarySearch(arr, target, mid + 1, high);
            } else {
                return binarySearch(arr, target, low, high - 1);
            }

Watch for/while and if/else statements for inefficient code
    O(n) - linear - searches can take a long time. going through each step in a for loop
    O(log n) - logarithmic - needs at least 2 data inputs and is faster than O(n)
    O(1) is just same number of steps each time
    O(n^2) - quadratic - bubble sort, nested loops



Benchmark.js
    npm install Benchmark
    const Benchmark = require('benchmark');\
    const suite = new Benchmark.Suite;
    suite
    .add('random test', function() {
        // benchmark generating a random number
        Math.floor(Math.random() * 10) + 1;
    })
    .on('complete', function() {
        console.log(this);
    })
    .run();

Alternatives to Benchmark.js
    Front End - Performance Web API (MDN)
    Back End - Performance Timing API (Node.js)


Sort Algorithms - array of numbers
    - bubble sort
        adjacent numbers are continually swapped to put the bigger number on the right
        best if array is already sorted
    - quick sort
        picking a pivot point from the array, then creating two new arrays and pushing elements into one or the other based on if they are greater or less than the pivot's value. then repeat this until you have several tiny arrays that can be re-merged into the right order
    - merge sort
        similar to quick sort that it divides into smaller arrays
        sort() JavaScript method 


pseudocode
    1. What are the basics I need to complete this task?
    2. How will I complete this task?
    3. What will the task look like when complete? 
    4. What are the edge cases?
    5. What does the function need?




Regular Expressions (regex)
    a sequence of characters that defines a search pattern for text
    from math concept of regular sets
    look at sequence of literal characters and translate what they mean 
    starts and ends with /
    meta characters (any character of this kind)
        ^ - start
        $ - end
        - a character that does not indicate a single literal character 
        - indicates some type of more general pattern
        \d - any digit 0-9
            phone number 
                \d\d\d-\d\d\d-\d\d\d\d
        \w - any character A-Za-z0-9 (word)
            - any letter or number
            \w+ - all "words" separated by anything
            \W - anything that's not a character or number
        \s - any whitespace (tab, space)
            \S - anything that's NOT whitespace
        
        . - any character
        * - quantifier (0 or more)
        .* - wildcard - followed by any number of any characters
    
        - can change based on language (JS "flavor" of regex)
    
        quantifier 
            - meta characters that modify previous characters in regex and say how many we want in a row
            * - 0 or more
            + - 1 or more
            ? - 0 or 1 - optionally
            {min, max}
            {n}
                \w{5} - finds all 5 chars in a row
            
            color/colour(s)
                - colou?rs?
            
        position
            - matches the position of a character in the string itself
            ^ - beginning
            $ - end
            \b - word boundary

            ^\w+ - first word of each line
            \w+$ - last word of each line
            ^\w+$ - words that are both start and end of line

            
        



regex
1. Digits
	• Whole Numbers – /^\d+$/
	• Decimal Numbers – /^\d*\.\d+$/
	• Whole + Decimal Numbers – /^\d*(\.\d+)?$/
	• Negative, Positive Whole + Decimal Numbers – /^-?\d*(\.\d+)?$/
	• Whole + Decimal + Fractions – /[-]?[0-9]+[,.]?[0-9]*([\/][0-9]+[,.]?[0-9]*)*/

	2. Alphanumeric Characters
	• Alphanumeric without space – /^[a-zA-Z0-9]*$/
	• Alphanumeric with space – /^[a-zA-Z0-9 ]*$/
	3. Email
	• Common email Ids – /^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6})*$/
	• Uncommon email ids – /^([a-z0-9_\.\+-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/
	4. Password Strength
	• Complex: Should have 1 lowercase letter, 1 uppercase letter, 1 number, 1 special character and be at least 8 characters long
/(?=(.*[0-9]))(?=.*[\!@#$%^&*()\\[\]{}\-_+=~`|:;"'<>,./?])(?=.*[a-z])(?=(.*[A-Z]))(?=(.*)).{8,}/ 
	• Moderate: Should have 1 lowercase letter, 1 uppercase letter, 1 number, and be at least 8 characters long
/(?=(.*[0-9]))((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.{8,}$/
	5. Username
	• Alphanumeric string that may include _ and – having a length of 3 to 16 characters –
/^[a-z0-9_-]{3,16}$/
	6. URL
	• Include http(s) Protocol
/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#()?&//=]*)/ 
	• Protocol Optional
/(https?:\/\/)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/ 


/* Match IPv4 address */
/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/ 
/* Match IPv6 address */
/(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))/
/* Match both IPv4, IPv6 addresses */
/((^\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\s*$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$))/

/* Date Format YYYY-MM-dd */
/([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))/
 
/* Date Format dd-MM-YYYY or 
               dd.MM.YYYY or
               dd/MM/YYYY
   with check for leap year */
/^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/
 
/* Date Format dd-mmm-YYYY or
               dd/mmm/YYYY or
               dd.mmm.YYYY */
/^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)(?:0?2|(?:Feb))\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/
    
        
9. Time
Time Format HH:MM 12-hour, optional leading 0
/^(0?[1-9]|1[0-2]):[0-5][0-9]$/
Time Format HH:MM 12-hour, optional leading 0, Meridiems (AM/PM)
/((1[0-2]|0?[1-9]):([0-5][0-9]) ?([AaPp][Mm]))/
Time Format HH:MM 24-hour with leading 0
/^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/
Time Format HH:MM 24-hour, optional leading 0
/^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/
Time Format HH:MM:SS 24-hour
/(?:[01]\d|2[0123]):(?:[012345]\d):(?:[012345]\d)/

11. Javascript Handlers
Inline JS handler /\bon\w+=\S+(?=.*>)/
Inline JS handler with element /(?:<[^>]+\s)(on\S+)=["']?((?:.(?!["']?\s+(?:\S+)=|[>"']))+.)["']?/
12. Slug
Slug /^[a-z0-9]+(?:-[a-z0-9]+)*$/
13. Match Duplicates in a String
Search Duplicates /(\b\w+\b)(?=.*\b\1\b)/


15. File Path
File Path with Filename and extension
/((\/|\\|\/\/|https?:\\\\|https?:\/\/)[a-z0-9 _@\-^!#$%&+={}.\/\\\[\]]+)+\.[a-z]+$/
File Path with optional Filename, extension
/^(.+)/([^/]+)$/
File Name with extension having 3 chars
/^[\w,\s-]+\.[A-Za-z]{3}$/



Matching a Hex Value – /^#?([a-f0-9]{6}|[a-f0-9]{3})$/

Matching an Email – /^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/

Matching a URL – /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/

Matching an HTML Tag – /^<([a-z]+)([^<]+)*(?:>(.*)<\/\1>|\s+\/>)$/




Question
    All the different ways to write a function and why

