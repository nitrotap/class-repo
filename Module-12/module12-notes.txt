Module 12 Notes
SQL

CRUD
C - Create
R - Read
U - Update
D - Delete

Setting up blank database in mysql
mysqld --initialize-insecure --console
mysqld --console
mysql -u root --skip-password
ALTER USER 'root'@'localhost' IDENTIFIED BY 'new_password';

starting database
C:\Program Files\MySQL\MySQL Server 8.0\bin>mysqld --console
(new window)
C:\Program Files\MySQL\MySQL Server 8.0\bin>mysql -u root -p

Setting up BLANK database in mysql @ C:\Program Files\MySQL\MySQL Server 8.0\data
mysqld --initialize-insecure --console
mysqld --console
mysql -u root --skip-password
ALTER USER 'root'@'localhost' IDENTIFIED BY 'new_password';

starting database - 
have to start it in the mysql bin directory
C:\Program Files\MySQL\MySQL Server 8.0\bin>mysqld --console
then, in a separate cmd.exe window
C:\Program Files\MySQL\MySQL Server 8.0\bin>mysql -u root -p


Using MySQL
create a database
    CREATE DATABASE <databaseName>;
    USE <databaseName>;

create a table
    PRIMARY KEY designates primary key for table
    CREATE TABLE <tableName> (
        id INTEGER(11) AUTO_INCREMENT PRIMARY KEY,
        <columnName> <columnDataType> <etc>
    )

    CREATE TABLE candidates (
        id INTEGER AUTO_INCREMENT PRIMARY KEY,
        first_name VARCHAR(30) NOT NULL,
        last_name VARCHAR(30) NOT NULL,
        industry_connected BOOLEAN NOT NULL
    );

Language
    VARCHAR = text (variable character)
    BOOLEAN = 0 for false; 1 for true
    NOT NULL = column must contain a value
    NULL = okay to be empty
    ALWAYS USE SEMICOLON
    * = ALL
    PRIMARY KEY = unique identifier for the value within the database
    ORDER BY <column> DESC - order descending
    CONSTRAINT <constraintName> UNIQUE <col>



Adding data
    INSERT INTO <table> (<firstCol>, <secondCol>, <thirdCol>)
    VALUES (<firstColValue>, <secondColValue>, <thirdColValue>)
        order of values must match order of columns
        primary key is generated by SQL
    
Finding data (SELECT query)
    SELECT * / SELECT <column1>, <column2>
    FROM <table>
    WHERE <filter by expression>

    = sign is evaluated as equality, not assignment

Removing data
    DROP DATABASE <databaseName>

    DELETE FROM <databaseName>
    WHERE <expression>;

Changing data - always use id!
    UPDATE <databaseName>
    SET <assignmentExpression>
    WHERE <locationExpression;
    

setting up database with Files
    source db/db.sql
    source db/schema.sql
    db/seeds.sql

getting started with npm and express
    npm install express mysql2

    const mysql = require('mysql2');
    const db = mysql.createConnection(
        {
            host: 'localhost',
            // Your MySQL username,
            user: 'root',
            // Your MySQL password
            password: 'SQLr0cks!',
            database: 'election'
        },
        console.log('Connected to the election database.')
    );

    db.query(`<sqlString>`, (err, rows) => {
        console.log(rows)
    })

    // GET a single candidate
    db.query(`SELECT * FROM candidates WHERE id = 1`, (err, row) => {
        if (err) {
            console.log(err);
        }
        console.log(row);
    });
    // Delete a candidate
    db.query(`DELETE FROM candidates WHERE id = ?`, 1, (err, result) => {
        if (err) {
            console.log(err);
        }
        console.log(result);
    });

    // combining sql with express routes
    app.get('/api/candidates', (req, res) => {
        const sql = `SELECT * FROM candidates`;
        db.query(sql, (err, rows) => {
            if (err) {
                res.status(500).json({ error: err.message });
                return;
            }
            res.json({
                message: 'success',
                data: rows
            });
        });
    });

prepared statement - has a ?
    can execute the same SQL statement repeatedly using different values in place of the placeholder

http request .delete() 
    app.delete()
// Delete a candidate
// always use else statement to make sure you aren't deleting elements that don't exist
app.delete('/api/candidate/:id', (req, res) => {
  const sql = `DELETE FROM candidates WHERE id = ?`;
  const params = [req.params.id];

  db.query(sql, params, (err, result) => {
    if (err) {
      res.statusMessage(400).json({ error: res.message });
    } else if (!result.affectedRows) {
      res.json({
        message: 'Candidate not found'
      });
    } else {
      res.json({
        message: 'deleted',
        changes: result.affectedRows,
        id: req.params.id
      });
    }
  });
});

Foreign key - field in one table that references the primary key of another table

ALTER TABLE
    add a new field, delete an existing field, or modify a field
    ALTER TABLE candidates ADD COLUMN party_id INTEGER;

Constraint
    allows us to flag foreign keys
    CONSTRAINT fk_party FOREIGN KEY (party_id) REFERENCES parties(id) ON DELETE SET NULL
    CONSTRAINT <> UNIQUE <>
    CONSTRAINT fk_<> FOREIGN KEY <columnName> REFERENCES <table(col)> ON DELETE CASCADE
        - deleting reference key deletes entire row from table
    CREATE TABLE books(
        id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
        book_name VARCHAR(30) NOT NULL,
        price INTEGER,
        FOREIGN KEY (price)
        REFERENCES prices(id)
        ON DELETE SET NULL
    );
    
Aggregate Function in SQL
    perform math logic on data
    COUNT(), AVG(), SUM(), MIN()

GROUP BY
    consolidate several rows of data by a shared value

DROP TABLE IF EXISTS <table>;
    to drop delete tables at runtime - add to top of schema.sql
    order matters! dependencies go under dependent tables


Databases (relational, non-relational)
Relational Databases
    maintain links across tables
    prevent duplicate data entries
    collections of grid-like tables consisting of columns and rows
    each table has a primary key
    can use foreign key to refer to the id of a primary key of another table
    one-to-one or one-to-many


JOIN - merge two or more tables together, filling in foreign keys with actual data
    Inner JOIN
    Left JOIN
    Right JOIN
    Full Outer JOIN

AS - used to rename columns 
    parties.name AS party_name

Normalization - process of organizing relational data
    Separation of Concerns - each table represents a specific topic
    limits data redundancy
    allows writing simpler SQL queries
    less risk for data modification

created-at DATETIME DEFAULT CURRENT_TIMESTAMP
    - add to create table block for current time


    













Questions:
    How to connect inquirer with database?

    How do I get setup with pathfinder ui? - don't need to use

    

    





